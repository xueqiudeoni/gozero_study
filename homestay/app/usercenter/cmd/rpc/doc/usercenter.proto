syntax = "proto3";
option go_package="./user_pb";
package user;

//model
message User{
  int64 id=1;
  string mobile=2;
  string nickname=3;
  int64 sex=4;
  string avatar=5;
  string info=6;
}
message UserAuth{
  int64 id=1;
  int64 userId=2;
  string authType=3;
  string authKey=4;
}

//req„ÄÅresp
message RegisterReq {
  string mobile = 1;
  string nickname=2;
  string password=3;
  string authKey=4;
  string authType=5;
}

message RegisterResp {
  string accessToken = 1;
  int64 accessExpire=2;
  int64 accessAfter=3;
}

message LoginReq{
  string authType=1;
  string authKey=2;
  string password=3;
}
message LoginResp{
  string accessToken=1;
  int64 accessExpire=2;
  int64 refreshAfter=3;
}
message GetUserInfoReq{
  int64 id=1;
}
message GetUserInfoResp{
  User user=1;
}
message GetUserAuthKeyReq{
  string authKey=1;
  string authType=2;
}
message GetUserAuthKeyResp{
  UserAuth userrauth=1;
}
message GetUserAuthByUserIdReq{
  int64 userId=1;
  string authType=2;
}
message GetUserAuthByUserIdResp{
  UserAuth userAuth=1;
}
message GenTokenReq{
  int64 userId=1;
}
message GenTokenResp{
  string accessToken=1;
  int64 accessExpire=2;
  int64 refreshAfter=3;
}

//service
service usercenter {
  rpc login(LoginReq)returns(LoginResp);
  rpc register(RegisterReq) returns (RegisterResp);
  rpc getUserInfo(GetUserInfoReq)returns(GetUserInfoResp);
  rpc getUserAuthKey(GetUserAuthKeyReq)returns(GetUserAuthKeyResp);
  rpc getUserAuthByUserId(GetUserAuthByUserIdReq)returns(GetUserAuthByUserIdResp);
  rpc genToken(GenTokenReq)returns(GenTokenResp);
}
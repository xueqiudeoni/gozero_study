// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"homestay/common/globalkey"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAuthFieldNames          = builder.RawFieldNames(&UserAuth{})
	userAuthRows                = strings.Join(userAuthFieldNames, ",")
	userAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHomestayUsercenterUserAuthIdPrefix              = "cache:homestayUsercenter:userAuth:id:"
	cacheHomestayUsercenterUserAuthAuthTypeAuthKeyPrefix = "cache:homestayUsercenter:userAuth:authType:authKey:"
	cacheHomestayUsercenterUserAuthUserIdAuthTypePrefix  = "cache:homestayUsercenter:userAuth:userId:authKey:"
)

type (
	userAuthModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserAuth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAuth, error)
		FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UserAuth, error)
		FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UserAuth, error)
		Update(ctx context.Context, data *UserAuth) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAuthModel struct {
		sqlc.CachedConn
		table string
	}

	UserAuth struct {
		Id          int64        `db:"id"`           // id
		Email       string       `db:"email"`        // 邮箱
		Mobile      string       `db:"mobile"`       // 手机号
		Version     int64        `db:"version"`      // 版本号
		UserId      int64        `db:"userId"`       // 用户id
		AuthKey     string       `db:"auth_key"`     // 平台唯一id
		AuthType    string       `db:"auth_type"`    // 平台类型
		UpdatedTime time.Time    `db:"updated_time"` // 更新时间
		CreatedTime time.Time    `db:"created_time"` // 创建时间
		DeletedTime sql.NullTime `db:"deleted_time"` // 删除时间
		DelState    int64        `db:"del_state"`
	}
)

func newUserAuthModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserAuthModel {
	return &defaultUserAuthModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_auth`",
	}
}

func (m *defaultUserAuthModel) Delete(ctx context.Context, id int64) error {
	userAuthIdKey := fmt.Sprintf("%s%v", cacheHomestayUsercenterUserAuthIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userAuthIdKey)
	return err
}

func (m *defaultUserAuthModel) FindOne(ctx context.Context, id int64) (*UserAuth, error) {
	homestayUsercenterUserAuthIdKey := fmt.Sprintf("%s%v", cacheHomestayUsercenterUserAuthIdPrefix, id)
	var resp UserAuth
	err := m.QueryRowCtx(ctx, &resp, homestayUsercenterUserAuthIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAuthRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UserAuth, error) {
	homestayUsercenterUserAuthAuthTypeAuthKey := fmt.Sprintf("%s%v:%v", cacheHomestayUsercenterUserAuthAuthTypeAuthKeyPrefix, authType, authKey)
	var resp UserAuth
	err := m.QueryRowIndexCtx(ctx, resp, homestayUsercenterUserAuthAuthTypeAuthKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (any, error) {
		query := fmt.Sprintf("select %s from %s where `auth_type`=? and `auth_key`=? and `del_state`=? limit 1", userAuthRows, m.table)
		if err := conn.QueryRowCtx(ctx, v, query, authType, authKey, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUserAuthModel) FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UserAuth, error) {
	homestayUsercenterUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheHomestayUsercenterUserAuthUserIdAuthTypePrefix, userId, authType)
	var resp UserAuth
	err := m.QueryRowIndexCtx(ctx, &resp, homestayUsercenterUserAuthUserIdAuthTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (any, error) {
		query := fmt.Sprintf("select %s from %s where `user_id`=? and `auth_type`=? and del_state=? limit 1", userAuthRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, authType, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUserAuthModel) Insert(ctx context.Context, session sqlx.Session, data *UserAuth) (sql.Result, error) {
	data.DeletedTime.Time = time.Unix(0, 0)
	data.DelState = globalkey.DelStateNo
	homestayUsercenterUserAuthIdKey := fmt.Sprintf("%s%v", cacheHomestayUsercenterUserAuthIdPrefix, data.Id)
	homestayUsercenterUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheHomestayUsercenterUserAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	homestayUsercenterUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheHomestayUsercenterUserAuthUserIdAuthTypePrefix, data.UserId, data.AuthType)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userAuthRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Version, data.UserId, data.AuthKey, data.AuthType, data.DeletedTime, data.DelState)
		}
		return conn.ExecCtx(ctx, query, data.Email, data.Version, data.UserId, data.AuthKey, data.AuthType, data.DeletedTime, data.DelState)
	}, homestayUsercenterUserAuthAuthTypeAuthKeyKey, homestayUsercenterUserAuthIdKey, homestayUsercenterUserAuthUserIdAuthTypeKey)
}

func (m *defaultUserAuthModel) Update(ctx context.Context, data *UserAuth) error {
	userAuthIdKey := fmt.Sprintf("%s%v", cacheHomestayUsercenterUserAuthIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAuthRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Email, data.Mobile, data.Version, data.UserId, data.AuthKey, data.AuthType, data.UpdatedTime, data.CreatedTime, data.DeletedTime, data.DelState, data.Id)
	}, userAuthIdKey)
	return err
}

func (m *defaultUserAuthModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHomestayUsercenterUserAuthIdPrefix, primary)
}

func (m *defaultUserAuthModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAuthRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserAuthModel) tableName() string {
	return m.table
}
